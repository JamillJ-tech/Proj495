using System;
using System.Collections.Generic;
using MySql.Data.MySqlClient;
namespace PhysioDynamik_Prototype_1
{
public class Patient
{
    public string Name { get; set; }
    public int PatientID { get; set; }
    public string Email { get; set; }
    public string PhoneNumber { get; set; }
    public DateTime DateOfBirth { get; set; }
    public List<Appointment> AppointmentList { get; set; }
    private List<string> PaymentMethods { get; set; }
    public MedicalRecord MedicalRecord { get; set; }
//CreateAccount Method
// Methods

    // CreateAccount
    public bool CreateAccount(string email, string password, string confirmPassword, string name, string phoneNumber, DateTime dateOfBirth)
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password) || password != confirmPassword)
        {
            Console.WriteLine("Account creation failed. Please check your inputs.");
            return false;
        }

        Console.WriteLine($"Account successfully created for {name} ({email}).");
        return true;
    }

    // Login
    public void Login(string email, string password)
    {
        Console.WriteLine($"Login successful for {email}.");
    }

    // EnterBookingDetails
    public void EnterBookingDetails(string details)
    {
        Console.WriteLine($"Booking details entered: {details}");
    }

    // FillRegistrationForm
    public void FillRegistrationForm(int formID)
    {
        Console.WriteLine($"Registration form with ID {formID} has been filled.");
    }

    // CreatePassword
    public void CreatePassword(string newPassword)
    {
        Console.WriteLine("Password created successfully.");
    }

    // AgreeTermsAndConditions
    public void AgreeTermsAndConditions()
    {
        Console.WriteLine("Terms and conditions agreed.");
    }

    // SubmitForm
    public void SubmitForm()
    {
        Console.WriteLine("Form submitted successfully.");
    }

    // ViewAppointment
    public void ViewAppointment()
    {
        Console.WriteLine("Viewing appointments...");
        foreach (var appointment in AppointmentList)
        {
            Console.WriteLine($"- Appointment ID: {appointment.AppointmentID}, Date: {appointment.Date}, Status: {appointment.Status}");
        }
    }

    // SelectAppointment
    public void SelectAppointment(int appointmentID)
    {
        Console.WriteLine($"Appointment with ID {appointmentID} has been selected.");
    }

    // MakePayment
    public void MakePayment(decimal amount)
    {
        Console.WriteLine($"Payment of {amount:C} processed successfully.");
    }

    // ViewAssessment
    public void ViewAssessment()
    {
        Console.WriteLine("Assessment details viewed.");
    }
}

// Extending Patient Class with static method to fetch data
    public partial class Patient
    {
        public void ViewPatientInformation()
        {
            Console.WriteLine($"Name: {Name}");
            Console.WriteLine($"Patient ID: {PatientID}");
            Console.WriteLine($"Email: {Email}");
            Console.WriteLine($"Phone: {PhoneNumber}");
            Console.WriteLine($"Date of Birth: {DateOfBirth.ToShortDateString()}");
        }

        public static Patient GetPatientByID(int id)
        {
            DatabaseHelper dbHelper = new DatabaseHelper();
            Patient patient = null;

            using (var connection = dbHelper.GetConnection())
            {
                try
                {
                    connection.Open();
                    string query = "SELECT * FROM Patients WHERE PatientID = @PatientID";
                    using (var cmd = new MySqlCommand(query, connection))
                    {
                        cmd.Parameters.AddWithValue("@PatientID", id);
                        using (var reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                patient = new Patient
                                {
                                    PatientID = reader.GetInt32("PatientID"),
                                    Name = reader.GetString("Name"),
                                    Email = reader.GetString("Email"),
                                    PhoneNumber = reader.GetString("PhoneNumber"),
                                    DateOfBirth = reader.GetDateTime("DateOfBirth")
                                };

                                // Fetch associated medical record
                                patient.MedicalRecord = MedicalRecord.GetMedicalRecordByPatientID(id);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching patient: {ex.Message}");
                }
            }

            return patient;
        }
    }

}

public class Therapist
{
    public int TherapistID { get; set; }
    public string Name { get; set; }
    public string Specialty { get; set; }
    public List<Appointment> AppointmentList { get; set; }
    public bool PaymentConfirmed { get; set; }
}

public class Appointment
{
    public int AppointmentID { get; set; }
    public DateTime Date { get; set; }
    public string Status { get; set; }
}

public class Homework
{
    public int HomeworkID { get; set; }
    public int ClientID { get; set; }
    public int TherapistID { get; set; }
    public DateTime DueDate { get; set; }
    public string SubmissionStatus { get; set; }
}

public class Resource
{
    public int ResourceID { get; set; }
    public int TherapistID { get; set; }
    public int ClientID { get; set; }
    public string ResourceType { get; set; }
    public DateTime DateGiven { get; set; }
}

public class Feedback
{
    public int FeedbackID { get; set; }
    public int HomeworkID { get; set; }
    public int TherapistID { get; set; }
    public int ClientID { get; set; }
    public DateTime DateGiven { get; set; }
}

public class RegistrationForm
{
    public int FormID { get; set; }
}

public class Receptionist
{
    public int ReceptionistID { get; set; }
    public string Name { get; set; }
    public bool PaymentVerified { get; set; }
}

public class PaymentGateway
{
    public int MethodType { get; set; }
    public string AccountNumber { get; set; }
    public string CardHolderName { get; set; }
    public DateTime ExpirationDate { get; set; }

    // Method to process a payment transaction
    public bool ProcessTransaction(decimal amount)
    {
        // Logic to interact with payment provider, simplified here
        Console.WriteLine($"Processing transaction of {amount:C} for cardholder {CardHolderName}");
        return true; // Assuming transaction succeeds
    }

    public bool ValidatePayment()
    {
        // Logic to validate payment details, such as expiration date
        return DateTime.Now < ExpirationDate;
    }
}

public class Payment
{
    public int PaymentID { get; set; }
    public DateTime PaymentDate { get; set; }
    public decimal Amount { get; set; }
    public string Status { get; set; }
    // Method to initiate payment
    public void InitiatePayment(PaymentGateway paymentGateway, decimal amount)
    {
        if (paymentGateway.ValidatePayment())
        {
            bool success = paymentGateway.ProcessTransaction(amount);
            if (success)
            {
                Status = "Success";
                PaymentDate = DateTime.Now;
                Console.WriteLine("Payment succeeded.");
                Receipt.GenerateReceipt(PaymentID, amount);
            }
            else
            {
                Status = "Failed";
                Console.WriteLine("Payment failed. Please try again.");
            }
        }
        else
        {
            Console.WriteLine("Payment validation failed. Please check your payment details.");
        }
    }
}

public class Manager
{
    private int ManagerID { get; set; }
    private string Name { get; set; }
    private string Email { get; set; }
    private string PhoneNumber { get; set; }

    // Method for manager to review the monthly performance report
    public void ReviewMonthlyPerformanceReport(DateTime reportDate)
    {
        PerformanceReport report = PerformanceReport.GetMonthlyPerformanceReport(reportDate);
        if (report != null)
        {
            report.DisplayReport();
            Notification.SendNotification("Manager", $"Performance report for {reportDate.ToString("MMMM yyyy")} has been reviewed.", "Info");

        }
        else
        {
            Console.WriteLine("No performance report found for the selected month.");
        }
    }
}

public class SystemClass
{
    public int SystemID { get; set; }
    public DatabaseHelper DatabaseHelper { get; set; }
    public int AvailableSlots { get; set; }

    // Constructor to initialize DatabaseHelper
    public SystemClass()
    {
        DatabaseHelper = new DatabaseHelper();
    }

// Method to run the system and fetch patient details
        public void RunSystem()
        {
            Console.WriteLine("Welcome to PhysioDynamik System");
            Console.WriteLine("Enter Patient ID to view details: ");
            int patientID = int.Parse(Console.ReadLine() ?? "0");

            // Step 1: Fetch Patient Information
            Patient patient = Patient.GetPatientByID(patientID);

            if (patient != null)
            {
                // Step 2: Display Patient Information
                Console.WriteLine("\n--- Patient Details ---");
                patient.ViewPatientInformation();

                // Step 3: Fetch and Display Medical Record
                if (patient.MedicalRecord != null)
                {
                    Console.WriteLine("\n--- Medical Record ---");
                    patient.MedicalRecord.ViewMedicalRecord();
                }
                else
                {
                    Console.WriteLine("No medical record found for this patient.");
                }
            }
            else
            {
                Console.WriteLine("Patient not found.");
            }
        }
}

public class Receipt
{
    private int ReceiptID { get; set; }
    private int PaymentID { get; set; }
    private int ClientID { get; set; }
    public decimal Amount { get; set; }
    public DateTime Date { get; set; }

    // Method to generate a receipt after payment
    public static void GenerateReceipt(int paymentID, decimal amount)
    {
        Console.WriteLine($"Receipt generated for Payment ID: {paymentID}, Amount: {amount:C}");
    }
}

public class PerformanceReport
{
    public int ReportID { get; set; }
    public DateTime Date { get; set; }
    public string Metrics { get; set; }
    // Method to fetch monthly performance report from MySQL database
    public static PerformanceReport GetMonthlyPerformanceReport(DateTime reportDate)
    {
        PerformanceReport report = null;
        DatabaseHelper dbHelper = new DatabaseHelper();

        using (var connection = dbHelper.GetConnection())
        {
            try
            {
                connection.Open();
                string query = "SELECT * FROM PerformanceReport WHERE MONTH(Date) = @Month AND YEAR(Date) = @Year";
                using (MySqlCommand cmd = new MySqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@Month", reportDate.Month);
                    cmd.Parameters.AddWithValue("@Year", reportDate.Year);
                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            report = new PerformanceReport
                            {
                                ReportID = reader.GetInt32("ReportID"),
                                Date = reader.GetDateTime("Date"),
                                Metrics = reader.GetString("Metrics")
                            };
                        }
                    }
                }
            }
            catch (MySqlException ex)
            {
                Console.WriteLine($"Database error: {ex.Message}");
            }
        }

        return report;
    }

    // Method to display the performance report
    public void DisplayReport()
    {
        Console.WriteLine("Performance Report:");
        Console.WriteLine($"Report ID: {ReportID}");
        Console.WriteLine($"Date: {Date.ToShortDateString()}");
        Console.WriteLine($"Metrics: {Metrics}");
    }
}

public class Notification 
{
    private int NotificationID { get; set; }
    private string Content { get; set; } 
    public string Recipient { get; set; }
    public string Type { get; set; }
    public string Message { get; set; }

    // Method to send notification
    public static void SendNotification(string recipient, string message, string type)
    {
        DatabaseHelper dbHelper = new DatabaseHelper();

        using (var connection = dbHelper.GetConnection())
        {
            try
            {
                connection.Open();
                string query = "INSERT INTO Notification (Recipient, Message, Type, Content) VALUES (@Recipient, @Message, @Type, @Content)";
                using (MySqlCommand cmd = new MySqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@Recipient", recipient);
                    cmd.Parameters.AddWithValue("@Message", message);
                    cmd.Parameters.AddWithValue("@Type", type);
                    cmd.Parameters.AddWithValue("@Content", message);  // In this case, Content and Message are the same
                    cmd.ExecuteNonQuery();
                }

                Console.WriteLine($"Notification sent to {recipient}: {message}");
            }
            catch (MySqlException ex)
            {
                Console.WriteLine($"Database error: {ex.Message}");
            }
        }
    }
}

public class StaffSchedule
{
    public int ScheduleID { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public string AvailableSlots { get; set; }
}

public class Document
{
    public int DocumentID { get; set; } 
    public string FileType { get; set; } 
    public DateTime UploadDate { get; set; }
}

public class MedicalRecord
{
    public int PatientID { get; set; }
    public string Report { get; set; }
    public List<DateTime> TreatmentHistory { get; set; }

 // Extending MedicalRecord Class with static method to fetch data
    public partial class MedicalRecord
    {
        public void ViewMedicalRecord()
        {
            Console.WriteLine($"Report: {Report}");
            Console.WriteLine("Treatment History:");
            foreach (var date in TreatmentHistory)
            {
                Console.WriteLine($"- {date.ToShortDateString()}");
            }
        }

        public static MedicalRecord GetMedicalRecordByPatientID(int patientID)
        {
            DatabaseHelper dbHelper = new DatabaseHelper();
            MedicalRecord record = null;

            using (var connection = dbHelper.GetConnection())
            {
                try
                {
                    connection.Open();
                    string query = "SELECT * FROM MedicalRecords WHERE PatientID = @PatientID";
                    using (var cmd = new MySqlCommand(query, connection))
                    {
                        cmd.Parameters.AddWithValue("@PatientID", patientID);
                        using (var reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                record = new MedicalRecord
                                {
                                    PatientID = reader.GetInt32("PatientID"),
                                    Report = reader.GetString("Report"),
                                    TreatmentHistory = new List<DateTime>() // Placeholder for treatment dates
                                };

                                // Optionally, fetch treatment history if stored in another table
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching medical record: {ex.Message}");
                }
            }

            return record;
        }
    }
}

public class Assessment
{
    private int ClientID { get; set; }
    private string Description { get; set; }
    private string Status { get; set; }
    private string Result { get; set; }
}

public class ConfirmationEmail
{
    public int EmailID { get; set; }
    public string RecipientEmail { get; set; }
    public string Message { get; set; }
}

public class Account
{
    private int AccountID { get; set; }
    private string Email { get; set; } 
    private string Password { get; set; }
}
}
